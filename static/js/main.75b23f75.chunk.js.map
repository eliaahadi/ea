{"version":3,"sources":["Home.tsx","ProductManagement.tsx","Development.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","Title","classes","className","Grid","container","item","xs","WhoAmI","Paper","WhereIWork","HowIWork","Home","ProductManagment","Development","LinkTab","Tab","NavBar","React","value","setValue","AppBar","position","Tabs","onChange","event","newValue","icon","component","Link","to","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","ProductManagement","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAKMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASL,EAAMM,QAAQ,GACvBC,UAAW,SACXC,MAAOR,EAAMS,QAAQC,KAAKC,gBAKhC,SAASC,IACP,IAAMC,EAAUf,IAEhB,OACE,yBAAKgB,UAAWD,EAAQX,MACtB,kBAACa,EAAA,EAAD,CAAMC,WAAS,EAACV,QAAS,GACvB,kBAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IAEb,yCAOV,SAASC,IACP,IAAMN,EAAUf,IAEhB,OACE,yBAAKgB,UAAWD,EAAQX,MACtB,kBAACa,EAAA,EAAD,CAAMC,WAAS,EAACV,QAAS,GACvB,kBAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACE,EAAA,EAAD,CAAON,UAAWD,EAAQT,OAA1B,UAOV,SAASiB,IACP,IAAMR,EAAUf,IAEhB,OACE,yBAAKgB,UAAWD,EAAQX,MACtB,kBAACa,EAAA,EAAD,CAAMC,WAAS,EAACV,QAAS,GACvB,kBAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACE,EAAA,EAAD,CAAON,UAAWD,EAAQT,OAA1B,YAOV,SAASkB,IACP,IAAMT,EAAUf,IAEhB,OACE,yBAAKgB,UAAWD,EAAQX,MACtB,kBAACa,EAAA,EAAD,CAAMC,WAAS,EAACV,QAAS,GACvB,kBAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACE,EAAA,EAAD,CAAON,UAAWD,EAAQT,OAA1B,UAQK,SAASmB,IACtB,OACE,6BACE,kBAACX,EAAD,MACA,kBAACO,EAAD,MACA,kBAACE,EAAD,MACA,kBAACC,EAAD,OChFS,SAASE,IACtB,OACE,mCCFW,SAASC,IACtB,OACE,4CCcJ,IAAMC,EAAqDC,IAM3D,SAASC,IAAW,IAAD,EACaC,WAAe,GAD5B,mBACNC,EADM,KACCC,EADD,KAMX,OACA,2BACI,gBAACC,EAAA,EAAD,CAAQC,SAAS,UAEb,gBAACC,EAAA,EAAD,CAAMJ,MAAOA,EAAOK,SAPT,SAACC,EAA8BC,GAC9CN,EAASM,KAOD,gBAACX,EAAD,CAASY,KAAM,OAAQC,UAAWC,IAAMC,GAAG,UAC3C,gBAACf,EAAD,CAASY,KAAM,cAAeC,UAAWC,IAAMC,GAAG,iBAClD,gBAACf,EAAD,CAASY,KAAM,qBAAsBC,UAAWC,IAAMC,GAAG,WCzBzDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFuCD,WACb,OACA,gBAAC,IAAD,KACE,2BACI,gBAACpB,EAAD,MACA,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,QAAQX,UAAYhB,IACtC,gBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,eAAeX,UAAYd,IAC7C,gBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,MAAMX,UAAYY,SE/ChC,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75b23f75.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }),\n);\n\nfunction Title() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          {/* <Paper className={classes.paper}>TITLE</Paper> */}\n          <div>TITLE</div>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nfunction WhoAmI() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>WHO</Paper>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nfunction WhereIWork() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>WHERE</Paper>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nfunction HowIWork() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>HOW</Paper>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\n\nexport default function Home() {\n  return (\n    <div>\n      <Title />\n      <WhoAmI />\n      <WhereIWork />\n      <HowIWork />\n    </div>\n  )\n};\n","import React from 'react';\n\nexport default function ProductManagment() {\n  return (\n    <div>PM</div>\n  )\n};\n","import React from 'react';\n\nexport default function Development() {\n  return (\n    <div>Development</div>\n  )\n};\n","\nimport * as React from \"react\";\n// import * as ReactDOM from \"react-dom\";\n// import { MonitorContainer } from \"Monitor/MonitorContainer\";\nimport { BrowserRouter as Router, Route, Redirect, Switch, Link, LinkProps } from 'react-router-dom';\n// import { RemoteContainer } from \"Remote/RemoteContainer\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport { default as Tab, TabProps } from '@material-ui/core/Tab';\nimport ListIcon from '@material-ui/icons/ListAlt';\nimport RemoteControlIcon from '@material-ui/icons/SettingsRemote';\n// import './reset.css';\n// import './index.scss';\n// import '../assets/fonts/icons/flaticon.css';\nimport Home from './Home';\nimport ProductManagement from './ProductManagement';\nimport Development from './Development';\n\nconst LinkTab: React.ComponentType<TabProps & LinkProps> = Tab as React.ComponentType<TabProps & LinkProps>;\n\n// export interface AppState {\n//     value: number;\n// }\n\nfunction NavBar () {\n      const [value, setValue] = React.useState(0);\n\n      const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n            setValue(newValue);\n          };\n        return (\n        <div>\n            <AppBar position=\"static\">\n            {/* //     <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\"> */}\n                <Tabs value={value} onChange={handleChange} >\n                    <LinkTab icon={'HOME'} component={Link} to=\"/home\" />\n                    <LinkTab icon={'Development'} component={Link} to=\"/development\" />\n                    <LinkTab icon={'Product Management'} component={Link} to=\"/pm\" />\n                </Tabs>\n            </AppBar>\n        </div>\n        )\n    // }\n};\n\nexport default function App() {\n  return (\n  <Router>\n    <div>\n        <NavBar />\n        <Switch>\n            <Route exact path=\"/home\" component={ Home } />\n            <Route exact path=\"/development\" component={ Development } />\n            <Route exact path=\"/pm\" component={ ProductManagement } />\n            {/* <Redirect from=\"/\" to=\"/\" /> */}\n        </Switch>\n    </div>\n</Router>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}